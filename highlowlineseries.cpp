// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "highlowlineseries.h"

// Dispatch interfaces referenced by this interface
#include "valuelist.h"
#include "pointer.h"


/////////////////////////////////////////////////////////////////////////////
// CHighLowLineSeries properties

/////////////////////////////////////////////////////////////////////////////
// CHighLowLineSeries operations

long CHighLowLineSeries::AddHighLow(double AX, double AHigh, double ALow, LPCTSTR AXLabel, unsigned long AColor)
{
	long result;
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_R8 VTS_BSTR VTS_I4;
	InvokeHelper(0xc9, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		AX, AHigh, ALow, AXLabel, AColor);
	return result;
}

CValueList CHighLowLineSeries::GetHighValues()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0xca, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CValueList(pDispatch);
}

CValueList CHighLowLineSeries::GetLowValues()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0xcb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CValueList(pDispatch);
}

double CHighLowLineSeries::MaxYValue()
{
	double result;
	InvokeHelper(0xcc, DISPATCH_METHOD, VT_R8, (void*)&result, NULL);
	return result;
}

double CHighLowLineSeries::MinYValue()
{
	double result;
	InvokeHelper(0xcd, DISPATCH_METHOD, VT_R8, (void*)&result, NULL);
	return result;
}

CPointer CHighLowLineSeries::GetHighPointer()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x12d, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CPointer(pDispatch);
}

CPointer CHighLowLineSeries::GetLowPointer()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x12e, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CPointer(pDispatch);
}

long CHighLowLineSeries::Clicked(long X, long Y)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x12f, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		X, Y);
	return result;
}
